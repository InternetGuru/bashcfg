#!/bin/bash

SCRIPT_NAME="$(basename "$0")"
source "$(dirname "$0")/../globals"
source "$(dirname "$0")/../git_functions"

function git_flow {

  ## defaults and constants
  local usage line init
  usage="$(formatUsage "
  DESCRIPTION
         $SCRIPT_NAME automatically create or merge branches according to git flow model mentioned below. Also automatically increment version and help with creating changelog. For more informations see man $SCRIPT_NAME.

  USAGE
         $SCRIPT_NAME [-ih]

  OPTIONS
         -i, --init
                Initialize current folder to be compatible with git flow model

         -h, --help
                This help (usage).

  SEE
         Git flow model: http://nvie.com/posts/a-successful-git-branching-model/
  ")"
  init=false

  ## process options
  if ! line=$(
    getopt -n "$0" \
           -o i,h\? \
           -l init,help\
           -- "$@"
  )
  then return 1; fi
  eval set -- "$line"

  ## load user options
  while [ $# -gt 0 ]; do
    case $1 in
     -i|--init) init=true; shift ;;
     -h|-\?|--help) echo -e "$usage" && return 0 ;;
      --) shift; break ;;
      *-) echo "$0: Unrecognized option '$1'" >&2; return 1 ;;
       *) break ;;
    esac
  done

  ## functions

  #
  # Current branch:
  #
  #  dev
  #   - increment minor version, set patch to 0
  #   - create release-major.minor branch
  #
  #  master, major.minor (eg. 1.10)
  #   - increment patch version
  #   - create hotfix-major.minor.patch branch
  #
  #  hotfix-x or release-x; alias current
  #   - merge dev branch with current
  #   - prompt to merge master with current
  #   - ^ yes: merge master with current, add tag to master
  #   - ^ success: prompt to merge major.minor with master
  #   - ^ yes: merge major.minor with master
  #   - prompt to delete current
  #
  #  feature
  #   - update version history
  #   - merge dev branch with feature
  #   - prompt to delete branch
  #
  function _git_flow {

    git_repo_exists \
      || err "Use git_flow_init" \
      || return 1

    local curbranch major minor patch tag master oIFS

    curbranch=$(gcb) || return $?
    git_status_empty || return $?

    # read version
    oIFS=$IFS
    IFS=.
    read major minor patch < "$VERSION"
    IFS=$oIFS

    master=${major}.$minor

    case ${curbranch%-*} in

      dev|master|$master)
        local branch code header
        # set branch name and increment version
        branch="hotfix-${master}.$((++patch))"
        [[ $curbranch == dev ]] \
          && branch="release-${major}.$((++minor))" \
          && patch=0
        # try create a new branch
        git checkout -b $branch
        code=$?
        # branch already exists, checkout on it
        [[ $code == 128 ]] \
          && git checkout $branch \
          && return $code
        # checkout failed
        [[ $code != 0 ]] && return $code
        # update version
        echo ${major}.${minor}.$patch > $VERSION
        # commit changed $VERSION
        [[ $curbranch != dev ]] \
          && git commit -am $branch \
          && return $?
        # write header to $CHANGELOG
        header="${major}.${minor} | $(date "+%Y-%m-%d")"
        printf '\n%s\n\n%s\n' "$header" "$(<$CHANGELOG)" > $CHANGELOG
        # commit $CHANGELOG and run git_flow on new branch
        git commit -am $branch \
          && git_flow \
          && git checkout $branch
        ;;

      hotfix)
        tag=${master}.$patch
        ;&

      release)
        [[ -z "$tag" ]] && tag=${master}.0
        ;&

      *)
        # feature
        if [[ -z "$tag" ]]; then
          local tmpfile
          git rebase dev || return $?
          tmpfile="$(mktemp)"
          # prepare message for $CHANGELOG
          {
            echo -e "\n# commits:"
            git log dev..$curbranch --pretty=format:"#   %s"
            echo -e "\n# Please enter the message for your changes. Lines starting"
            echo -e "# with # and empty lines will be ignored."
          } >> "$tmpfile"
          "${EDITOR:-vi}" "$tmpfile"
          # remove comments and empty lines
          sed -i '/^\s*\(#\|$\)/d;/^\s+/d' "$tmpfile"
          # write to $CHANGELOG
          cat "$CHANGELOG" >> "$tmpfile" && mv "$tmpfile" "$CHANGELOG"
          git commit -am "Version history updated"
        fi
        # merge to dev
        git checkout dev \
          && git merge --no-ff $curbranch \
          || return $?
        # not feature, confirm merge branch to master
        [[ -n "$tag" ]] \
          && confirm "Merge branch '$curbranch' into $master?" \
          && git checkout master \
          && ( git checkout $master || git checkout -b $master ) \
          && git merge --no-ff $curbranch \
          && git tag $tag \
          && confirm "Merge branch '$master' into master?" \
          && git checkout master \
          && git merge $master \
          && git checkout $master
        # confirm delete branch, including remote
        if confirm "Delete branch '$curbranch'?"; then
          git branch -r | grep origin/$curbranch$ >/dev/null \
            && git push origin :refs/heads/$curbranch
          git branch -d $curbranch
        fi
    esac
  }

  #
  # Prepare enviroment for git_flow:
  # - create $VERSION and $CHANGELOG file
  # - create dev branch (from master)
  #
  function _git_flow_init {
    local commit checkout_master=true
    # init git repo
    git_repo_exists 2>/dev/null || { git init; checkout_master=false; }
    git_status_empty || return $?
    commit=false
    # checkout to master if it isn't new pository
    $checkout_master \
      && { git checkout master 2>/dev/null \
      || { echo "Branch master not found"; return 1; }; }
    # create $VERSION file
    [[ ! -f $VERSION ]] \
      && echo 0.0.0 > $VERSION \
      && echo "version file $VERSION created" \
      && commit=true
    # create $CHANGELOG file
    [[ ! -f $CHANGELOG ]] \
      && touch $CHANGELOG \
      && echo "changelog file $CHANGELOG created" \
      && commit=true
    # commit changes
    $commit \
      && git add -A \
      && git commit -am "init git flow"
    # create dev branch
    git_branch_exists dev 2>/dev/null || git branch dev
    git checkout dev
  }

  if init; then
    _git_flow_init
    return $?
  fi

  _git_flow

}